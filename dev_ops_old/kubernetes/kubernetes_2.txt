Static pod = Static pods are managed directly by kubelet daemon on specific node instead of kube-apiserver. They can be created using file-hosted or network hosted manifests. Static pods are bound to one kubelet on specific node. Kubelet tries to create a mirror pod on kube-apiserver for each static pod. It is used to deploy control plane components. Kubeadm tool uses static pods to deploy control plane components.

DaemonSet = Runs copy of pods on all the nodes. Use case :- cluster storage daemon, log collection daemon, node monitoring daemon

Kubernetes Schedular = scheduling refers to matching pods to right nodes so kubelet can run them. Schedular watches for newly created pods that don't have node assigned and binds them to the best node. Schedular first filters nodes not matching the requirements and then scores remaining nodes to find the best one.
You can also specify node in pod template but that is used only in special cases.

Labels and Selectors =
Labels = key-value pair.
label selector = supports equality based (=, ==, !=) and set based (in, not in , exists). multiple selector acts as AND condition.

nodeSelector = specify labels in this field in pod templates to schedule pods on only nodes having given labels. 
Node Affinity = property of pods that attracts them to set of nodes. There are two types of node affinity
	1. requiredDuringSchedulingIgnoredDuringExecution
	2. preferredDuringSchedulingIgnoredDuringExecution
taints = Taints allow nodes to repel a set of pods. It has following effects - NoSchedule, PreferNoSchedule, NoExecute
Toleration = Toleration are applied on pods. Toleration allows schedular to schedule pods with matching taints key value, effect and operator(equal operator, default).

Use case for taints and tolerance = Dedicated Nodes, Nodes with special hardware, Taints based eviction.


Kubernetes deployment strategies : defines strategy to replace old pods by new pods.
	Recreate = all existing pods are killed first and then new pods are created.
	RollingUpdate(default) = one pod is killed and new revision pod is created and wait until its running. then repeat the process for next pod. Use maxUnavailable and maxSurge to control rolling update process.
	
	replicas = number of pods to create.
	
Environment Variables = environment variables can be passed as value, or valueFrom ( in which you can use configmap and secrets ).

ConfigMap = key-value pairs used as env variables or config files in volume.
Secrets = used to store passwords, token and other sensitive data. Kubernetes only send secret to node if required. Kubernetes stores secrets in tmpfs, so secret never written on disk. Once the pod requiring secret is deleted, kubernetes also deletes local copy of secret.

secrets in etcd are by default stored as plain text, Anyone with api access or etcd access can retrieve, modify a secret. Also anyone with ability to create a pod in given namespace have read access to secrets.

Init Container = To perform the tasks that has been done only at a startup. First initContainer will run and after it's successful execution main container will start. If initContainer fails kubernetes restart the pod.

OS upgrades = kubernetes has pod eviction timeout of 5 mins so if you can complete update before 5 mins, you can take the node down. But there is another more safe way to do this by using kubernetes drain command. which will remove all the pods from current node and move them to other node. Then you can cordon node to avoid scheduling pods on that node. Then you can safely upgrade the node. then again using uncordon command you can get node back in use.

Backup and restore method = Following three are backup candidates in kubernetes.
1. Resource configurations = kubectl get all -A -o yaml > config.yaml
2. ETCD cluster = Using etcdctl cli tool take snapshot save which will save data directory /var/lib/etcd to desired location. From there you can stop api-server and then restore snapshot by passing saved directory.
3. Persistent Volumes = 

Authentication = There are following actors who need to access kubernetes cluster :  Developers, Admin, end users and bots.
For Admins and Developers we create Users in Kubernetes for Bots we create a Service Accounts. Kube-apiserver is responsible for authenticating the users. Kube-apiserver can authenticate using following methods.
1. static password file
2. Static token file
3. Certificates
4. Identity Services

Kubeconfig = 
kubectl config = $HOME/.kube/config = This file has three sections. 
1. Clusters
2. Users
3. Contexts = Contexts defines which cluster account will be used to access which cluster.
4. current-context

Kubectl proxy = 

Authorisation = There are 4 types of authorisation in Kubernetes
1. Node = kubelets needs to access kube-apiserver, for that purpose Any nodes with System node group and system node in prefix is authorised by special authoriser called node authoriser.
2. ABAC = You use a policy file to define access to different roles. Each time policy file is updated you need to restart kube-apiserver for changes to take effect.
3. RBAC = 
4. Webhook = Use third party authentication service to decide users permissions.
5. AlwaysAllow (default) = 
6. AlwaysDeny = 

We can use multiple authorisation modes same time. It authorises request by order of authorisation modes provided. When a authorisation mode denies the request it is passed to next mode.

RoleBindings = role binding grants permission defined in a role to a user or set of users.

cluster Roles = Roles and Role bindings are namespaced (ie. only applicable within given namespace.) You can also isolate pods, services and deployment using namespaces. But some resources such as nodes cannot be assigned to a namespace. This resources are called cluster scoped resources. Other resouces are categoriesed as namespaced resources. Example of cluster scoped resouces are pv and namespaces. Cluster roles and cluster bindings are used to give permissions on cluster scoped resources.

I am currently studying Service Accounts in Mumshad manambeth's CKA udemy course.

	
Kubernetes Service Account : Used to identify non-human identities in kubernetes cluster. Application pods, system components and internal or external entities can use service account to perform different actions. Service accounts are different from user accounts which are authenticated human users in cluster. 
when you create a cluster, kubernetes automatically creates service account named "default" for every namespace in your cluster. Default SA don't get any permission other than api discovery and recreated if you delete it. Also pods automatically gets assigned default SA for the namespace if not provided.

Kubernetes Volume : There are multiple volume types but belwo two are most important ones.
ConfigMap = 
Secret = 

Kubernetes Probe 
1. Startup probe = It's initial probe and all other probes are disabled until it succeeds. If startup probe fails then kubernetes restarts the container. You can put more time and attempts here to give slow starting app enough time to start.
2. Readyness probe = Sometime apps are unable to serve traffic temporarily due to data loads or waiting for third party service. You don't want to kill the pod but also don't want to send traffic to it. Readyness probe takes care of it. 
3. Liveness probe = check if app is working otherwise restarts it. Use can use inialDelaySeconds to provide inital delay instaed of startup probe. 

Kubernetes Pod restart policy = Spec of pod has a restart policy which is applicable to all the containers in the pod. There are threee values : Always (default), OnFailure and Never. After container exits, kubelet restarts container with exponential backoff timing with 5 minutes limit.


explain kubernetes architecture two main components :
1. control plane 
2. worker nodes
	
ingress
statefulset = 
Gateway    
