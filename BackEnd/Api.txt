

@EnableWebMvc = The new @EnableWebMvc annotation does some useful things – specifically, in the case of REST, it detects the existence of Jackson and JAXB 2 on the classpath and automatically creates and registers default JSON and XML converters. The functionality of the annotation is equivalent to the XML version:
<mvc:annotation-driven />
This is a shortcut, and though it may be useful in many situations, it’s not perfect. When more complex configuration is needed, remove the annotation and extend WebMvcConfigurationSupport directly.

@Controller = Usually, the controller is the last in the chain of dependencies – it receives HTTP requests from the Spring front controller (the DispathcerServlet) and simply delegates them forward to a service layer.
If there is no use case where the controller has to be injected or manipulated through a direct reference, then I prefer not to declare it as public.(didn't understood).

@RequestBody = will bind the parameters of the method to the body of the HTTP request.They also ensure that the resource will be marshalled and unmarshalled using the correct HTTP converter. Content negotiation will take place to choose which one of the active converters will be used, based mostly on the Accept header.

Unmapped Requests = If Spring MVC receives a request which doesn’t have a mapping, it considers the request not to be allowed and returns a 405 METHOD NOT ALLOWED back to the client.It is also good practice to include the Allow HTTP header when returning a 405 to the client, to specify which operations are allowed. This is the standard behavior of Spring MVC and does not require any additional configuration. 

Valid, Mapped Requests = For any request that does have a mapping, Spring MVC considers the request valid and responds with 200 OK if no other status code is specified otherwise.It is because of this that controller declares different @ResponseStatus for the create, update and delete actions but not for get, which should indeed return the default 200 OK.

Client Error = In the case of a client error, custom exceptions are defined and mapped to the appropriate error codes.

@ExceptionHandler = Another option to map custom exceptions on specific status codes is to use the @ExceptionHandler annotation in the controller. The problem with that approach is that the annotation only applies to the controller in which it is defined, not to the entire Spring Container, which means that it needs to be declared in each controller individually.This quickly becomes cumbersome, especially in more complex applications which many controllers. 

@RestController = A convenience annotation that is itself annotated with @Controller and @ResponseBody.Types that carry this annotation are treated as controllers where @RequestMapping methods assume @ResponseBody semantics by default.

Replacement of web.xml = Basically, we need to create two classes:
	ApplicationInitializer: this is an initializer class which is loaded at the startup of the application, it defines the configuration class of the application along with the context url.
	ApplicationConfiguration: this is the configuration class of the application, it is basically used to instruct the servlet container to load REST resources from a specific package.