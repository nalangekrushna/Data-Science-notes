getting_started

what is terraform ?
terraform is infrastructure as a code tooling used to manage cloud and bare metal it infrastructure declaratively.
terraform(tf) is an immutable, declarative, infrastructure as code provisioning language based on Hashicorp config language(HCL) or optionally json.


what is IaaC ?
IaaC is a process of managing infrastructure programatically. So it can be consistent, repeatable, version controled and drift detectable.

what is a drift
Drift is unintended or unaccounted changes in infrastructure. 

composition -> infra module -> resource module -> resource/data source

terraform command flow
init -> fmt -> validate -> plan -out=./tfplan -> apply tfplan -> show/state list -> destroy

short command flow
plan -out=tfplan -> apply tfplan

to add changes made outside to terraform state
terraform apply -refresh-only -auto-approve

to handle specific resource
tf apply -target=


Below are the some of the key concepts used in terraform.
Resource = Each terraform resource describes one or more infrastructure objects such as aws-vpc, db-instance etc. A resource belongs to provider, accepts arguments, outputs attributes and has a lifecycle. A resource can be created, retrieved, updated and deleted.

module = A module is a container for multiple resources used together. A module is collection of .tf and/or .tf.json files kept together in directory. A terraform moudule only consist of top-level config files in the directory. Nested directories are treated as completely seperate modules and are not automatically included into the config. terraform modules can use module calls to explicitly include other modules in config. 

root module = terraform always runs in context of single root module. in terraform cli root module is the working directory where terraform is invoked. 

Resource module = resource module is collection of connected resources which together performs the common action. e.g. aws vpc terraform module creates vpc subnet and nat gateway etc.

Infrastructure module = infra module is collection of resource modules.

Composition = composition is collection of infrastructure modules, which can span across several logically seperated areas(e.g. aws regions, several aws accounts). Composition is used to describe complete infrastructure required for the whole organization or project.

data source = data source performs read only operations and depend on/belongs to provider config. It is used in resource or infra module. data source is accessed by special kind of resource called data resource declared using data block. data source reads information in planning phase if available. otherwise if data source is depend upon one of the managed resources, it defers the reading until apply phase to preserve order of operations.

Generally data source belongs to provider but there are special data sources which operates within terraform only. e.g. local-only data source exists for rendering templates, reading local files and rendering aws iam policies. speical data sources result data only temporarily exists during tf operation and recalculated each time a new plan is created.

terraform expression = expressions refer to or are compute values in configuration. Expressions can be data exported by resource, arithmatic conditional evaluation and number of built-in functions. You can try expressions using terraform console command. Some of the examples of expressions are for, splat, dynamic block, conditionals etc. (in programmig term, it is similar to lambda functions)

meta-arguments = A meta arguments controls terraforms behaviour when creating, desroying and replacing resources. meta arguments for resource includes count, depends_on, for_each and providers. 

depends_on meta-argument (arguments defined by terraform itself and apply across all data sources.) within data block can be used to defer reading of data sources until all the changes to dependancies has been applied.(ie. to define explicit dependancies). depends_on should be used as last resort cause it may replace more resources than needed. Alternatives to depends_on is terraform expressions.

count meta-argument = It is preferable to use for_each meta-arguments instead of count meta-argument. A given resource or module block cannot use both count and for_each. 

for_each meta-argument = For each object takes map or set of string as input. In the block where for_each is used, there is a each object which have two keys each.key and each.value. (In case of set both key value are same.) In for each all set values and keys of map value should be known before any remote operation can be started. 

remote state = infra modules or compositions should persist their terraform state in remote location where it can be retrieved by others in controllable way.
 

provider = terraform relies on plugins called providers to interact with cloud providers, saas provider and other api's

provisioners = they are used to model specific actions on local machine or remote machine in order to preprare server or othere infrastructure objects for service. Only use provisioners if there are no other option. Some of example usage of provisioners null_resource will be 1. Running sql script on RDS 2. Delay in resource creation/deletion provisioners are used with special provider provided by terraform called null provider which have null_resource and null_data_source. 

prev null_data_source was typically used to construct intermediate values to re-use elsewhere in config. The same can now be achieved using locals. By default provisioners will only run when the resource within they defined are being created. If provisioner fails during startup the resource is marked as tainted. Tainted resource will be marked for destruction and recreation during next tf apply. 

If when = destroy is specified then provisoner will run during the resource within it defined is being destroyed. Destroy provisioners run before the resource is destroyed. If provisioners fails during starting or destroying then tf apply will also fail. we can change this by using (on_failure=continue) setting to continue instead of fail. Multiple provisioners can be specified and they run in the order defined in config file. 

Provisioners self object = Expressions in provisioner block cannot refer to their parent resource by name instead they use the special self object. The self object represents provisioners parent resource and has all that resource attributes.
e.g.  ${self.private_ip}

terraform config structure = standard terraform project should contain following files.
1. main.tf = call modules, locals and data sources to create all resources.
2. variables.tf = contains declaration of variables used in main.tf
3. outputs.tf = contains outputs from resources created in main.tf
4. versions.tf = contains version requirements for terraform and providers.

terraform.tfvars should not be used anywhere except in compositions. Or secrets.tfvars can be used to store secrets instead of using environment variables.



to create public terraform modules
	1. module repo must use this three part format terraform-<provider>-<module_name>
	2. module version is must and should be in x.y.z format optionally prefixed with v
	3. the module must be on github and must be a public repo.

terraform HCL recommends 2 spaces between each nesting level. 
tf enterprise in locations of non-available internet access is called air-gapped installation.

terraform file structures
main.tf
	locals
	data
	module
	resource

versions.tf
	terraform
		required_providers
			aws
			
variables.tf
	variable

outputs.tf
	output

resource "aws_instance" "example" {
  ami = "abc123"

  network_interface {
    # ...
  }
}

<block type> "<resource type>" "<local name/label>" 

1. Here resource is a block type. Every blcok type defines how many labels it requires.
2. "aws_instance" is resource type and "example" is labels/local name. 
3. block body starts and end with this { and } delimiters.
4. Inside block can contain more blocks and arguments.

