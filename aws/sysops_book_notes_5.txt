Amazon Aurora = fully managed, MySQL-compatible, relational database engine. An Amazon Aurora cluster volume is a virtual database storage volume that spans multiple Availability Zones, with each Availability Zone containing a copy of the cluster data. Two types of instances make up an Aurora DB cluster
	Primary Instance = A primary instance supports read-write workloads and performs all of the data modifications to the cluster volume. Each Amazon Aurora DB cluster has one primary instance.
	Aurora Replica = An Aurora Replica supports only read operations. Each DB cluster can have up to 15 Aurora Replicas in addition to the primary instance
Aurora cluster volume/table can grow to a maximum size of 64 TB.	

Performance metrics by aws
IOPS = The number of I/O operations completed per second.
Latency = The elapsed time between the submission of an I/O request and its completion.
Throughput = The number of bytes per second transferred to or from disk.
Queue depth = The number of I/O requests in the queue waiting to be serviced.

all above metrics given as average in given time interval

Amazon RDS Multi-AZ deployments do not fail over automatically in response to database operations such as long running queries, deadlocks, or database corruption errors.

DynamoDB = NoSQL database supporting both document and key/value store models.
Items = Each table contains multiple items. An item is a group of attributes uniquely identifi able among all of the other items.Items in Amazon DynamoDB are similar in many ways to rows, records, or tuples in relational database systems.
Attributes = Each item is composed of one or more attributes. An attribute is a fundamental data element something that does not need to be broken down any further. Attributes in Amazon DynamoDB are similar to fields or columns in relational database systems.

Streams = ordered flow of information about changes to items. A stream record contains information about a data modification to a single item in a DynamoDB table.

Data Types = 
	Scalar = Number, String, Binary, Boolean, and Null
		Binary = Binary type attributes can store any binary data, such as compressed text, encrypted data, or images. The length of a binary attribute must be greater than zero and is constrained by the maximum Amazon DynamoDB item size limit of 400 KB.
	Document = There are two document types, list and map, that can be nested within each other to represent complex data structures up to 32 levels deep. There is no limit on the number of values in a list or a map as long as the item containing the values fits within the Amazon DynamoDB item size limit of 400 KB. An attribute value cannot be an empty string or an empty set; however, empty lists and maps are allowed.
		List = A list type attribute can store an ordered collection of values. Lists are enclosed in square brackets: [ ... ]. A list is similar to a JSON array. There are no restrictions on the data types that can be stored in a list element, and the elements in a list element can be different types.
		Map = A map type attribute can store an unordered collection of name/value pairs. Maps are enclosed in curly braces: { ... }. A map is similar to a JSON object. There are no restrictions on the data types that can be stored in a map element, and elements in a map do not have to be the same type.
		Set = number, string, or binary, All of the elements within a set must be of the same type. There is no limit on the number of values in a set, as long as the item containing the values fits within the Amazon DynamoDB 400 KB item size limit. Each value within a set must be unique. The order of the values within a set are not preserved. Amazon DynamoDB does not support empty sets.

Amazon DynamoDB supports eventually consistent and strongly consistent reads. Unless specified otherwise, DynamoDB uses eventually consistent reads as the default. When a strongly consistent read is requested, Amazon DynamoDB returns a response with the most up-to-date data that reflects the updates from all prior write operations that were successful.

Redshift = fully managed data warehousing solution. It automates infrastructure provisioning and administrative tasks, such as backups, replication, and patching.

Redshift Spectrum = runs SQL queries directly against exabytes of unstructured data in Amazon S3.

Leader Nodes = A leader node receives queries from client applications, parses the queries, and develops execution plans. These plans are an ordered set of steps to process these queries. The leader node coordinates the parallel execution of these plans with the compute nodes, aggregates the intermediate results from these nodes, and returns the results to the client applications.

Compute Nodes = Compute nodes execute the steps specified in the execution plans and transmit data among themselves to serve these queries. The intermediate results are sent back to the leader node for aggregation before being sent to the client applications.

ElastiCache = a distributed in-memory cache environment in the cloud.

Deployment Strategies
	provisioning infrastructure = manual or automated
	configuration management = see below.
	scalability
	monitoring 
	continous deployment = see below
	
Configuration Management
	tagging = Cost allocation reports aggregate costs based on tags.
	custom variables = you need to customize config values such as db string, security credentials etc. Defining variables can help loosely couple your application configuration. Additionally, you can differentiate environments into development, test, and production based on customized variables.
	Baking AMI = Baking an image is the process of creating your own AMI. Instead of using a bootstrap script to deploy your application, which could take an extended amount of time, this custom AMI could contain a portion of your application artifacts within it. The key factor to keep in mind is how long it takes for the instance to launch. Alternatively, copying the block of a volume where your application is already installed could be faster.
	logging
	instance profile = Applications that run on an Amazon EC2 instance must include AWS credentials in their API requests. Instead of doing it manually, you can use IAM roles to manage temporary credentials for applications that run on an Amazon EC2 instance. 
	
bootstrapping an instance = practice of automatically installing an application on an instance at the first boot. The bootstrapping process can be slower if you have a complex application or multiple applications to install. Managing a fleet of applications with several build tools and dependencies can be a challenging task during rollouts. Furthermore, your deployment service should be designed to perform faster rollouts to take advantage of Auto Scaling.

Continous deployment(cd) = two methods for cd
	In-place upgrade = performing application updates on existing Amazon EC2 instances. There are several deployment services that are especially useful for an in-place upgrade: AWS CodeDeploy, AWS OpsWorks, and AWS Elastic Beanstalk. AWS CodeDeploy is a deployment service that automates application deployments to Amazon EC2 instances. when using aws opworks for deployment, AWS OpsWorks Stacks triggers a Deploy event, which runs each layer’s Deploy recipes. AWS OpsWorks Stacks also installs stack configuration and deployment attributes that contain all of the information needed to deploy the application, such as the application’s repository and database connection data. AWS Elastic Beanstalk provides several options for how deployments are processed, including deployment policies (All at Once, Rolling, Rolling with Additional Batch, and Immutable) and options that let you configure batch size and health check behavior during deployments.
	Replacement upgrade = provisioning new Amazon EC2 instances, redirecting traffic to the new resources, and terminating older instances. For replacement upgrades, you provision a new environment with the deployment services, such as AWS Elastic Beanstalk, AWS CloudFormation, and AWS OpsWorks.
	
Blue/Green Deployments = Blue/green is a method where you have two identical stacks of your application running in their own environments. You use various strategies to migrate the traffic from your current application stack (blue) to a new version of the application (green). This method is used for a replacement upgrade. During a blue/green deployment, the latest application revision is installed on replacement instances and traffic is rerouted to these instances either immediately or as soon as you are done testing the new environment.

AWS OpsWorks Stacks = AWS OpsWorks is also recommended if you want to manage your infrastructure with 
a configuration management system such as Chef. 

we need to have optional mapping section in aws cloudformation template to enable multi-region deployments.

to deploy new version of application in different environment you need to change cname. 