Python notes

Keyword = reserved,cannot use as identifier, variable name, function name,case-sensitive
list of keywords -> import keyword; 	keyword.kwlist;
identifiers = combination of alphanumerics and underscore, can start with only alphabet or underscore. can't use special characters.
statements = any valid line of python code is called statement.

input() function is used to take input in python. whatever data you give it takes it as string.
comments = #,'''
muliline code = use \ at end of first line. or you can use it in brackets.
variable = location in memory to store some data(value).
id(variable) = gives location of variable in memory.
every value in python has datatype.since everything is object in python programming data types are actually classes and variables are instance(object) of classes.
data types in python
	numeric : int,float,complex
	string : strings are immutable(constant) in python.
	list [] = heterogeneous data types,mutable = sequential data structure = seq[start:end:step],indexing
	tuple () = heterogeneous data types, immutable(constant list), indexing
	set {} = unique data, heterogeneous data types,unordered (you can't access particular element.), non-indexing
	dictonary {key:value,key:value} = heterogeneous data types(like maps in java)
		to check if given key contains in dictionary you can use if 'key' in dict_name or dict_name.get('key')
	boolean
	
Operators in python
	Arithmetic  +-*/
	comparison  ==,!=,<>,<=
	assignment  =,+=,-=
	logical     &,|,!
	membership  in, not in     can be used to find element, character in list,tuple and string.
							   for dictionary it only works with exact key name and not for value.in
	identity    is, is not     compare the memory location of two objects
	
some special behaviour operators
floor division // it will only return quotient. and no reminder.
modulus % will return reminder only.
division / will return ratio.

contol flow 
if elif else

def func(a,b,*test,**kwargs)
func(1,2,’test1′,’test2′,{‘1′:1,’2’:2})
out: normal args 1 2 -> normal arguments
args (‘test1’, ‘test2’) -> tuples
kwargs {‘1’: 1, ‘2’: 2} -> key value pairs

%  operator gives modulus/reminder  e.g. 5%2  =1
// operator gives quotient    e.g. 5//2  = 2    -5/2 = -3 
**  exponential operator

write docstrings for function -- good programming practice.
Python returns None when you do not return anything in function.
Some built in methods
	all = check if all values are true( for 0 or False it returns false)
	enumerate = returns list with index
	dir =  gives all attributes of given variable.
	filter(function, list) = returns subset of list
	type = gives type of variable
	isinstance(variable,datatype) = return true or false
	map(function,list) = apply function to every value in list
	reduce(function,list) = apply function for first two values and then apply it to returned value with third value and so on.
Always keep non-default value arguments first.
lambda function  (lambda argument : code)  function without name. lambda function will return output without explicitly writing return keyword.

file handling = python will consider r (read) mode if not specified.there are other w,r+,x,a four modes.
modes of file handling
	w = creates/empties file and start writing from beginning.
	x = creates file, if already present then throws error.
	a = append at the end of file.
	
difference between syntax error and exception 
	the python program terminates as soon as it gets syntax error. syntax error will show an arrow below the code line where error comes.syntax error came as parser detects invalid statement.
	
Exception
	raise  = to throw error if any condition occurs.
	assert =  another way to check if condition satisfied otherwise throw error.
	try, except = regular exception handling functions.It avoids program crashing and allows us to handle error.
	try, except,else = In Python, using the else statement, you can instruct a program to execute a certain block of code only in the absence of exceptions.
	try, except,else,finally = no matter exception came or not finally will always execute.

pdb 
Insert the following code at the location where you want to break into the debugger:
import pdb; pdb.set_trace()
from python 3.7 there is another way breakpoint()
q = quit debugging
n = Use n (next) to continue execution until the next line and stay within the current function, i.e. not stop in a foreign function if one is called. Think of next as “staying local” or “step over”.
s (step) = Use s (step) to execute the current line and stop in a foreign function if one is called. Think of step as “step into”. If execution is stopped in another function

range() = When you're using an iterator, every loop of the for statement produces the next number on the fly.i.e.range
to use list instead of iterator.  list(range(n))