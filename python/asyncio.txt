Asyncio

Use asyncio if your code is IO bound(file system, database, network).
If your code is cpu bound then use multiprocessing library instead.

concurrency = broad term covering both multiprocessing and asyncio.
	1. multiprocessing (CPU-bound) = multi-core uses different cores.
	2. Pre-emptive multitasking (threading)(IO-bound) = single core. The operating system decides when to switch tasks external to Python.
	3. Co-operative multitasking (IO-bound)(asyncio) = single core. The tasks decide when to give up control.

when to use concurrency ?
Hold out on adding concurrency until you have a known performance issue and then determine which type of concurrency you need. 
Once you’ve decided that you should optimize your program, figuring out if your program is CPU-bound or I/O-bound is a great next step. 
CPU-bound problems only really gain from using multiprocessing. threading
For I/O-bound problems, there’s a general rule of thumb in the Python community: “Use asyncio when you can, threading when you must.”
asyncio can provide the best speed up for this type of program, but sometimes you will require critical libraries that have not been ported to take advantage of async programming. That time you can use threading 

Above explaination of concurrency is taken form below link
https://realpython.com/python-concurrency/

co-routine = a coroutine is a function that can suspend its execution before reaching return, and it can indirectly pass control to another coroutine for some time.

Asyncio = a single Python object, called the event loop, controls how and when each task gets run. The event loop is aware of each task and knows what state it’s in.

Simplified example of how Asyncio works ?
The ready state will indicate that a task has work to do and is ready to be run, and the waiting state means that the task is waiting for some external thing to finish, such as a network operation.
Your simplified event loop maintains two lists of tasks, one for each of these states. It selects one of the ready tasks and starts it back to running. That task is in complete control until it cooperatively hands the control back to the event loop.
When the running task gives control back to the event loop, the event loop places that task into either the ready or waiting list and then goes through each of the tasks in the waiting list to see if it has become ready by an I/O operation completing. It knows that the tasks in the ready list are still ready because it knows they haven’t run yet.
Once all of the tasks have been sorted into the right list again, the event loop picks the next task to run, and the process repeats. Your simplified event loop picks the task that has been waiting the longest and runs that. This process repeats until the event loop is finished.
An important point of asyncio is that the tasks never give up control without intentionally doing so. They never get interrupted in the middle of an operation. This allows us to share resources a bit more easily in asyncio than in threading. You don’t have to worry about making your code thread-safe.

await = you can view await as the magic that allows the task to hand control back to the event loop. When your code awaits a function call, it’s a signal that the call is likely to be something that takes a while and that the task should give up control.

async = It’s easiest to think of async as a flag to Python telling it that the function about to be defined uses await. 

you do need to remember that any function that calls await needs to be marked with async. You’ll get a syntax error otherwise.

how many no of request we can send at a time using asyncio ?
https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html

What does it mean for something to be asynchronous?
	Asynchronous routines are able to “pause” while waiting on their ultimate result and let other routines run in the meantime.
	


