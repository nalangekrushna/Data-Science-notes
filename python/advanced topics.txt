
Linked list = Linked lists differ from lists in the way that they store elements in memory. While lists use a contiguous memory block to store references to their data, linked lists store references as part of their own elements.
Each element of a linked list is called a node, and every node has two different fields:
    Data contains the value to be stored in the node.
    Next contains a reference to the next node on the list.
A linked list is a collection of nodes. The first node is called the head, and itâ€™s used as the starting point for any iteration through the list. The last node must have its next reference pointing to None to determine the end of the list. 
task : implement stack and queue using linked list.

difference between python list and numpy array  ?
python list and numpy array can take different data types(even objects also) in single list.
performance wise numpy arrays are better than python list.

context managers = context manage is a protocol or interface which your object has to follow to use with the with statement. Basically you need to add __enter__ and __exit__ method to an object to be used with context manager. you can use @contextmanager from contextlib to do the same.

metaclass = In python instance of object will have type of class name but if you check the type of class then it is "type". explained below with example. 
class Foo :
	pass
x= Foo()
type(x)
>> < class '__main__.Foo' >
type(Foo)
>> < class 'type' >
type of built-in classes is also type as well as type of type class is also type.

type is metaclass of which classes are instances. Just as ordinary object is an instance of class, any class is instance of type metaclass. you can dynamically create new classes using type metaclass. For more details check link below.
https://realpython.com/python-metaclasses/#defining-a-class-dynamically 

python closure = closure is a nested function (inner function) which has access to variables of enclosing function.  