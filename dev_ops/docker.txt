Docker provides the ability to package and run an application in a loosely isolated environment called a container. 

Docker provides tooling and a platform to manage the lifecycle of your containers:
	Develop your application and its supporting components using containers.
	The container becomes the unit for distributing and testing your application.
	When youâ€™re ready, deploy your application into your production environment, as a container or an orchestrated service.
	
Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface.

All best practices are taken from pythonspeed.com and docker official guide.
docker best practices
	use python:3.7.8-burster instead of python:3
	use requirements.txt instead of RUN pip install package_name.
	use COPY after pip install as you will able to get benefit of docker layer caching which will build fast.
	by default docker runs as root user, create another non-root user instead of using root.
	caching can lead to insecure images.
		https://pythonspeed.com/articles/official-docker-best-practices/   #1
	don't use alpine linux for python as it uses different implementation of gcc.
	to avoid image being too large use below link.
		https://pythonspeed.com/articles/system-packages-docker/
	to understand security risk for containers.
		http://canihaznonprivilegedcontainers.info/
	use docker buildkit to pass secrets.
	
	
	
buster = current stable release
stretch = prev stable release
slim = minimal package needed to run
	
some good deployment articles
https://hynek.me/articles/

RUN vs CMD vs ENTRYPOINT :
docker runs command in two forms shell form and executable form.
shell mode is below and shell mode preprocesses things such as variable parsing/substitution.
	instruction executable argument1 argument2 ....
Executable form is below and it didn't preprocess variables.
	instruction ['executable', 'argument1', 'argument2', ...]
	
	RUN command always creates new layer in both forms. CMD command in both form will set default parameters and if we run code without parameters it will use this default parameters to run the code. If you specify more than one CMD only last one will be executed. when using ENTRYPOINT command in executeable form, you can set additional parameters using cli. It does not ignore parameters provided by ENTRYPOINT. In shell form it will just ignore parameters provided on cli. 

create vs run vs start :
	docker create will only create a container. docker run will check if container is present or not, it will create container if not exists and run it. docker start will only run already created container. if you stopped created container and then try to run it then it will give error. to avoid the error use --rm flag in run command.

docker bind vs volume : bind is managed by native OS while volume is managed by docker. Volume is recommended option in most cases. bind only supports linux host OS while volume also supports windows and macOS. Also there is tmpfs(linux) and npipe(windows) for temporary storage. Volume gives better performance on windows and macOs while bind gives relatively fast performance on linux.

--mount vs -v = recommended is --mount. 
	